### LESSON 3: Mock objects deeply influence design 

* Only mock types you own
* Don't use getters
* Be explicit about what should not happen
* Specify as little as possible in a test
* Don't use mocks to test boundary objects
* Don't add behavior to mocks
* Only mock your immediate neighbors
* Don't create too many mocks
* Inject all dependencies

https://github.com/elm-city-craftworks/broken_record/blob/master/test/record_test.rb

I tried to make use of mock objects in many projects and many contexts
and rarely found a good way to work with them. This may be because I still
have a hard time thinking in terms of responsibility-driven design. It
also may be because I mostly worked on small projects throughout this study.

### LESSON 4: Spiking is inevitable but dangerous 

discuss alternatives / softer forms of spiking

Read through notes

- kent beck example
- GOOS recommendation of writing on index cards

### LESSON 5: Disciplined TDD comes at a high cost

(consider cutting)

Evo + Capybara
Blind / TicTacToe + Ray

Harder to evaluate statement:

- What are the costs of NOT doing TDD, or only doing a little TDD?
(some evidence that they're quite real and problematic)

- What are the benefits of TDD?

http://www.infoq.com/articles/virtual-panel-tdd-bdd

## Reflections

I have identified some of the things that get in the way of me experiencing the
benefits of TDD, but I haven't quite figured out how to fix those problems.
Also, the sheer time investment is something that's hard to ignore, feels like a
bit of a gamble. However, I think its fair enough to keep studying, at least
until I feel like I know where the boundaries are.
